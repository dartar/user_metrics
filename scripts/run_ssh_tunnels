#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
    Executes a series of ssh
"""


__author__ = 'ryan faulkner'
__email__ = 'rfaulkner@wikimedia.org'
__date__ = "02-21-2013"
__license__ = "GPL (version 2 or later)"


import sys
from user_metrics.config import logging
import argparse
import subprocess
from time import sleep
import user_metrics.config.settings as conf


def parseargs():
    """
        Process CLI arguments.

            **hosts** - a list of host names to setup ssh tunnels to.
    """
    parser = argparse.ArgumentParser(
        description=
        """
            Command line arguments for setting up ssh tunnels.
        """,
        epilog="",
        conflict_handler="resolve",
        usage="run_ssh_tunnels <host proxy> [<host proxy>]* [-q --quiet]* "
              "[-s --silent]* [-v --verbose]*"
    )

    parser.allow_interspersed_args = False

    defaults = {
        "quiet": 0,
        "silent": False,
        "verbose": 0,
    }

    parser.add_argument('hosts',
                        nargs='*',
                        type=str,
                        help='The metric to compute.',
                        default=['s1']
                        )
    parser.add_argument("-q", "--quiet",
                        default=defaults["quiet"],
                        action="count",
                        help="decrease the logging verbosity")
    parser.add_argument("-s", "--silent",
                        default=defaults["silent"],
                        action="store_true",
                        help="silence the logger")
    parser.add_argument("-v", "--verbose",
                        default=defaults["verbose"],
                        action="count",
                        help="increase the logging verbosity")

    return parser.parse_args()


def call_tunnel(host_alias):
    """
        Executes call that opens an ssh tunnel to remote host.
    """
    cmd = 'nohup ssh {0}@{1} -L {2}:{3}:{4}'.\
        format(conf.TUNNEL_DATA[host_alias]['user'],
               conf.TUNNEL_DATA[host_alias]['cluster_host'],
               str(conf.TUNNEL_DATA[host_alias]['tunnel_port']),
               conf.TUNNEL_DATA[host_alias]['db_host'],
               str(conf.TUNNEL_DATA[host_alias]['remote_port'])
               )
    return subprocess.Popen(cmd.split(),
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE)


def main(args):
    logging.debug('Begin execution.')

    # Initiate tunnels
    tunnels = dict()
    for host in args.hosts:
        tunnels[host] = call_tunnel(host)
        logging.info('Starting tunnel for host {0} on port {1}'.format(
            conf.TUNNEL_DATA[host]['db_host'],
            conf.TUNNEL_DATA[host]['tunnel_port']
        ))

    # Process loop
    try:
        while tunnels and not sys.stdin.read():
            sleep(1)
            for host, proc in tunnels.iteritems():
                if proc.poll():
                    logging.info('Host {0} died.'.format(host))
                    del tunnels[host]
    finally:
        for host, proc in tunnels.iteritems():
            if proc.poll():
                proc.terminate()
                logging.info('Terminating host {0}.'.format(host))

    logging.debug('Terminate execution.')


if __name__ == "__main__":
    args = parseargs()
    logging.debug(args)

    sys.exit(main(args))
