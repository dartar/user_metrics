#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
    Executes a series of ssh
"""


__author__ = 'ryan faulkner'
__email__ = 'rfaulkner@wikimedia.org'
__date__ = "02-21-2013"
__license__ = "GPL (version 2 or later)"


import sys
import logging
import argparse


# Add a do-nothing NullHandler to the module logger to prevent "No handlers
# could be found" errors. The calling code can still add other, more useful
# handlers, or otherwise configure logging.
log = logging.getLogger(__name__)
log.addHandler(logging.NullHandler())


def parseargs():
    """
        Process CLI arguments.

            **hosts** - a list of host names to setup ssh tunnels to.
    """
    parser = argparse.ArgumentParser(
        description=
        """
            Command line arguments for setting up ssh tunnels.
        """,
        epilog="",
        conflict_handler="resolve",
        usage="run_ssh_tunnels <host proxy> [<host proxy>]* [-q --quiet]* "
              "[-s --silent]* [-v --verbose]*"
    )

    parser.allow_interspersed_args = False

    defaults = {
        "quiet": 0,
        "silent": False,
        "verbose": 0,
    }

    parser.add_argument('hosts',
                        nargs='*',
                        type=str,
                        help='The metric to compute.',
                        default=['s1']
                        )
    parser.add_argument("-q", "--quiet",
                        default=defaults["quiet"],
                        action="count",
                        help="decrease the logging verbosity")
    parser.add_argument("-s", "--silent",
                        default=defaults["silent"],
                        action="store_true",
                        help="silence the logger")
    parser.add_argument("-v", "--verbose",
                        default=defaults["verbose"],
                        action="count",
                        help="increase the logging verbosity")

    return parser.parse_args()


def init_logger(logger, args, out=None, err=None):
    """ Initialize script logging. """
    if out is None:
        out = sys.stdout
    if err is None:
        err = sys.stderr

    level = logging.WARNING - ((args.verbose - args.quiet) * 10)
    if args.silent:
        level = logging.CRITICAL + 1

    log_format = "%(asctime)s %(levelname)-8s %(message)s"
    handler = logging.StreamHandler(err)
    handler.setFormatter(logging.Formatter(fmt=log_format,
                                           datefmt='%b-%d %H:%M:%S'))
    logger.addHandler(handler)
    logger.setLevel(level)


def main(args):
    log.debug('Begin execution.')
    log.debug('Terminate execution.')


if __name__ == "__main__":
    args = parseargs()
    init_logger(log, args)
    sys.exit(main(args))
