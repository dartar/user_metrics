User Metrics Changelog
======================


Version 0.1.1-dev
-----------------

Released on January 30th 2013, codename "UMAPI".

- Initial release
- Raw, aggregate, and time-series processing of English Wikipedia user
    cohorts over various metrics
- Metrics: http://meta.wikimedia.org/wiki/Research:Metrics#User_metrics
- API implementation in flask that exposes these requests via HTTP urls
- API also exposes single user requests


Version 0.1.2-dev
-----------------

Released on February 26th 2013.

- Cross project support, cohorts and requests outside of enwiki are supported
- Additional aggregators based on numpy methods (mean, median, max, min)
- New script "run_ssh_tunnels" that sets up multiple connections to database
    hosts on different local ports
- Redefined configuration settings to more easily allow for defining new
    connections and throttling max threads


Version 0.1.3-dev
-----------------

To be released on March 11th 2013.

- Expanded multi-project support
- pure JSON responses
- expose all parameters in JSON responses
- Deal with undefined metric values in a standard way
- Make all metrics relative to a user event (e.g. registration) as metrics
    like survival and threshold.  This can be bettet
- Refactor API source - break up functionality for easier maintenance and
    extensibility.
- Manage requests via a separate job manager.
    user_metrics.api.engine.request_manager module.
- Generate unique hashes from Request objects.
    build_key_signature method in user_metrics.api.engine.data


Version 0.1.4-dev
-----------------

To be released on March 25th 2013.

- User Session Management
    - flask-login
- Implementation of request caching outside the runtime
    - start with pickle objects
- Client for programmatically accessing API
    -> https://github.com/rfaulkner/umapi_client
- More robust testing.
    - added some testing
- Interface to load cohorts
- Request notifications listener
- Update request_manager module to handle larger responses on the queue
- Response Handler that builds responses for caching as they finish


Future Work
-----------

- Redefine API request entry points:
    * run/cohort/..
    * run/set/..
    * run/user/..
- Build filters that allow new cohorts to be generated from requests
- OAuth/OpenID integration.  This is essential for programmatic access.
- HTTPS